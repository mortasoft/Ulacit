/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jacob
 */
public class PieceSettings extends javax.swing.JFrame {

    String wPawnPath;
    String wKingPath;
    String bPawnPath;
    String bKingPath;
    
    public PieceSettings() throws FileNotFoundException, IOException{
        initComponents();
        setImages();
        // default filepaths
        wPawnPath = "./resources/pikachu.png";
        wKingPath = "./resources/raichu.png";
        bPawnPath = "./resources/magikarp.png";
        bKingPath = "./resources/gyarados.png";
    }
    
    // look and feel settings
    
    public void setImages() throws FileNotFoundException, IOException {
        // use filepaths from files
        FileReader fr = new FileReader("./save/piecePaths.txt");
        BufferedReader br = new BufferedReader(fr);
        
        String paths[] = new String[4];
        for (int i = 0; i < 4; i++) {
            String str = br.readLine();
            paths[i] = str;
        }
        
        addIcon(paths[0], whitePawnHolder);
        addIcon(paths[1], whiteKingHolder);
        addIcon(paths[2], blackPawnHolder);
        addIcon(paths[3], blackKingHolder);
        
        fr.close(); br.close();
    }
    
    public void addIcon(String path, JButton bt) { // resize and set Icon
        ImageIcon iconTemp = new ImageIcon(path);
        Image img = iconTemp.getImage();
        Image newimg = img.getScaledInstance((int) (bt.getHeight()*0.7), (int) (bt.getWidth()*0.7), java.awt.Image.SCALE_SMOOTH);
        ImageIcon icon = new ImageIcon(newimg);
        bt.setIcon(icon);
    }
    
    public void makeChanges() throws FileNotFoundException, UnsupportedEncodingException {
        PrintWriter w = new PrintWriter("./save/piecePaths.txt", "UTF-8"); // refresh the filepaths for icons
        w.println(wPawnPath);
        w.println(wKingPath);
        w.println(bPawnPath);
        w.println(bKingPath);
        w.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pieceSettingsLabel = new javax.swing.JLabel();
        whitePawnLabel = new javax.swing.JLabel();
        whiteKingLabel = new javax.swing.JLabel();
        blackKingLabel = new javax.swing.JLabel();
        newWhitePawn = new javax.swing.JButton();
        newWhiteKing = new javax.swing.JButton();
        newBlackPawn = new javax.swing.JButton();
        newBlackKing = new javax.swing.JButton();
        bPawnLabelHolder = new javax.swing.JPanel();
        blackPawnLabel = new javax.swing.JLabel();
        whitePawnHolder = new javax.swing.JButton();
        whiteKingHolder = new javax.swing.JButton();
        blackPawnHolder = new javax.swing.JButton();
        blackKingHolder = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 30), new java.awt.Dimension(0, 30), new java.awt.Dimension(32767, 30));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 30), new java.awt.Dimension(0, 30), new java.awt.Dimension(32767, 30));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 15), new java.awt.Dimension(0, 15), new java.awt.Dimension(32767, 15));
        saveChangesButton = new javax.swing.JButton();
        tipLabel = new javax.swing.JLabel();
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(32767, 10));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pieceSettingsLabel.setFont(new java.awt.Font("Kristen ITC", 0, 24)); // NOI18N
        pieceSettingsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pieceSettingsLabel.setText("Piece Settings");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(pieceSettingsLabel, gridBagConstraints);

        whitePawnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        whitePawnLabel.setLabelFor(whitePawnHolder);
        whitePawnLabel.setText("White Pawn");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(whitePawnLabel, gridBagConstraints);

        whiteKingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        whiteKingLabel.setLabelFor(whiteKingHolder);
        whiteKingLabel.setText("White King");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(whiteKingLabel, gridBagConstraints);

        blackKingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blackKingLabel.setLabelFor(blackKingHolder);
        blackKingLabel.setText("Black King");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(blackKingLabel, gridBagConstraints);

        newWhitePawn.setText("Upload New");
        newWhitePawn.setFocusPainted(false);
        newWhitePawn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWhitePawnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(newWhitePawn, gridBagConstraints);

        newWhiteKing.setText("Upload New");
        newWhiteKing.setFocusPainted(false);
        newWhiteKing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWhiteKingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(newWhiteKing, gridBagConstraints);

        newBlackPawn.setText("Upload New");
        newBlackPawn.setFocusPainted(false);
        newBlackPawn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBlackPawnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(newBlackPawn, gridBagConstraints);

        newBlackKing.setText("Upload New");
        newBlackKing.setFocusPainted(false);
        newBlackKing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBlackKingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(newBlackKing, gridBagConstraints);

        bPawnLabelHolder.setLayout(new java.awt.GridBagLayout());

        blackPawnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blackPawnLabel.setLabelFor(blackPawnHolder);
        blackPawnLabel.setText("Black Pawn");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        bPawnLabelHolder.add(blackPawnLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(bPawnLabelHolder, gridBagConstraints);

        whitePawnHolder.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        whitePawnHolder.setBorderPainted(false);
        whitePawnHolder.setContentAreaFilled(false);
        whitePawnHolder.setFocusPainted(false);
        whitePawnHolder.setFocusable(false);
        whitePawnHolder.setPreferredSize(new java.awt.Dimension(100, 100));
        whitePawnHolder.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(whitePawnHolder, gridBagConstraints);

        whiteKingHolder.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        whiteKingHolder.setBorderPainted(false);
        whiteKingHolder.setContentAreaFilled(false);
        whiteKingHolder.setFocusPainted(false);
        whiteKingHolder.setFocusable(false);
        whiteKingHolder.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(whiteKingHolder, gridBagConstraints);

        blackPawnHolder.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        blackPawnHolder.setBorderPainted(false);
        blackPawnHolder.setContentAreaFilled(false);
        blackPawnHolder.setFocusPainted(false);
        blackPawnHolder.setFocusable(false);
        blackPawnHolder.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(blackPawnHolder, gridBagConstraints);

        blackKingHolder.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        blackKingHolder.setBorderPainted(false);
        blackKingHolder.setContentAreaFilled(false);
        blackKingHolder.setFocusPainted(false);
        blackKingHolder.setFocusable(false);
        blackKingHolder.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(blackKingHolder, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        getContentPane().add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 9;
        getContentPane().add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(filler9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 5;
        getContentPane().add(filler10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 9;
        getContentPane().add(filler11, gridBagConstraints);

        saveChangesButton.setText("Save Changes");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        getContentPane().add(saveChangesButton, gridBagConstraints);

        tipLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tipLabel.setText("Files should be an image file, and preferably be square in shape.");
        tipLabel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(tipLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        getContentPane().add(filler12, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void newWhitePawnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWhitePawnActionPerformed
        JFileChooser fc = new JFileChooser(); // starts a filechooser and display it
        fc.setCurrentDirectory(new File("./resources"));
        fc.setFileFilter(new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes()));
        
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // if user clicks "ok"
            wPawnPath = fc.getSelectedFile().getAbsolutePath(); //get the file
            File f = new File(wPawnPath); // and save as a file
            
            String[] splitPath = f.getName().split("\\.");
            String srcPath = "./resources/" + splitPath[0] + "." + splitPath[1];
            try { // copy file from old path into resources folder
                Files.copy(f.toPath(), 
                        new File(srcPath).toPath(), // save into resources folder
                        StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {}
            
            wPawnPath = srcPath; // icon is now saved into resources
            addIcon(srcPath, whitePawnHolder); // update user icon
        }
    }//GEN-LAST:event_newWhitePawnActionPerformed

    private void newWhiteKingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWhiteKingActionPerformed
        JFileChooser fc = new JFileChooser(); // starts a filechooser and display it
        fc.setCurrentDirectory(new File("./resources"));
        fc.setFileFilter(new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes()));
        
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // if user clicks "ok"
            wKingPath = fc.getSelectedFile().getAbsolutePath(); //get the file
            File f = new File(wKingPath); // and save as a file
            
            String[] splitPath = f.getName().split("\\.");
            String srcPath = "./resources/" + splitPath[0] + "." + splitPath[1];
            try { // copy file from old path into resources folder
                Files.copy(f.toPath(), 
                        new File(srcPath).toPath(), // save into resources folder
                        StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {}
            
            wKingPath = srcPath; // icon is now saved into resources
            addIcon(srcPath, whiteKingHolder); // update user icon
        }
    }//GEN-LAST:event_newWhiteKingActionPerformed

    private void newBlackPawnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBlackPawnActionPerformed
        JFileChooser fc = new JFileChooser(); // starts a filechooser and display it
        fc.setCurrentDirectory(new File("./resources"));
        fc.setFileFilter(new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes()));
        
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // if user clicks "ok"
            bPawnPath = fc.getSelectedFile().getAbsolutePath(); //get the file
            File f = new File(bPawnPath); // and save as a file
            
            String[] splitPath = f.getName().split("\\.");
            String srcPath = "./resources/" + splitPath[0] + "." + splitPath[1];
            try { // copy file from old path into resources folders
                Files.copy(f.toPath(), 
                        new File(srcPath).toPath(), // save into resources folder
                        StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {}
            
            bPawnPath = srcPath; // icon is now saved into resources
            addIcon(srcPath, blackPawnHolder); // update user icon
        }
    }//GEN-LAST:event_newBlackPawnActionPerformed

    private void newBlackKingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBlackKingActionPerformed
        JFileChooser fc = new JFileChooser(); // starts a filechooser and display it
        fc.setCurrentDirectory(new File("./resources"));
        fc.setFileFilter(new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes()));
        
        int returnVal = fc.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) { // if user clicks "ok"
            bKingPath = fc.getSelectedFile().getAbsolutePath(); //get the file
            File f = new File(bKingPath); // and save as a file
            
            String[] splitPath = f.getName().split("\\.");
            String srcPath = "./resources/" + splitPath[0] + "." + splitPath[1];
            try { // copy file from old path into resources folders
                Files.copy(f.toPath(), 
                        new File(srcPath).toPath(), // save into resources folder
                        StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {}
            
            bKingPath = srcPath; // icon is now saved into resources
            addIcon(srcPath, blackKingHolder); // update user icon
        }
    }//GEN-LAST:event_newBlackKingActionPerformed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
        try {
            makeChanges();
        } catch (FileNotFoundException | UnsupportedEncodingException ex) {
            Logger.getLogger(PieceSettings.class.getName()).log(Level.SEVERE, null, ex);
        }
        dispose();
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PieceSettings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bPawnLabelHolder;
    private javax.swing.JButton blackKingHolder;
    private javax.swing.JLabel blackKingLabel;
    private javax.swing.JButton blackPawnHolder;
    private javax.swing.JLabel blackPawnLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton newBlackKing;
    private javax.swing.JButton newBlackPawn;
    private javax.swing.JButton newWhiteKing;
    private javax.swing.JButton newWhitePawn;
    private javax.swing.JLabel pieceSettingsLabel;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JLabel tipLabel;
    private javax.swing.JButton whiteKingHolder;
    private javax.swing.JLabel whiteKingLabel;
    private javax.swing.JButton whitePawnHolder;
    private javax.swing.JLabel whitePawnLabel;
    // End of variables declaration//GEN-END:variables
}
